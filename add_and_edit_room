@app.route('/addroom/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_room(id):
    form = JobForm()
    dbs = db_session.create_session()
    res = dbs.query(User).all()
    for el in res:
        form.collaborators.choices.append(str(el.id))
    if request.method == "GET":
        dbs = db_session.create_session()
        room = dbs.query(Room).filter((Room.id == id), (Room.user == current_user)).first()
        if room:
            room.title = form.title.data
            room.about = form.about.data
            room.team_leader = current_user.id
            room.collaborators = ','.join(form.collaborators.data)
            dbs.commit()
            return redirect('/allrooms')
        else:
            pass
    if form.validate_on_submit():
        dbs = db_session.create_session()
        room = dbs.query(Jobs).filter((Room.id == id), (Rooms.user == current_user)).first()
        # user = dbs.query(User).filter(User.email == form.email.data).first()
        if not user:
            return render_template('addjob.html', message='Неверно указана почта', form=form)
        if room:
            room.title = form.title.data
            room.about = form.about.data
            room.team_leader = current_user.id
            room.collaborators = ','.join(form.collaborators.data)
            dbs.commit()
            return redirect('/allrooms')
        else:
            pass
    return render_template('addjob.html', form=form)


@app.route('/room_delete/<int:id>', methods=['GET', 'POST'])
@login_required
def delete_room(id):
    dbs = db_session.create_session()
    rooms = dbs.query(Room).filter((Room.id == id), (Room.user == current_user)).first()
    if rooms:
        dbs.delete(rooms)
        dbs.commit()
    else:
        pass
    return redirect('/allrooms')
